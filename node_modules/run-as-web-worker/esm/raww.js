import { functionToString, getDependencyConstructor } from "./utils";
import { __extends, __assign, __rest, __decorate, __param, __metadata, __awaiter, __generator, __exportStar, __values, __read, __spread, __spreadArrays, __await, __asyncGenerator, __asyncDelegator, __asyncValues, __makeTemplateObject, __importStar, __importDefault } from "tslib";
const tslibDependencies = {
    __extends: __extends,
    __assign: __assign,
    __rest: __rest,
    __decorate: __decorate,
    __param: __param,
    __metadata: __metadata,
    __awaiter: __awaiter,
    __generator: __generator,
    __exportStar: __exportStar,
    __values: __values,
    __read: __read,
    __spread: __spread,
    __spreadArrays: __spreadArrays,
    __await: __await,
    __asyncGenerator: __asyncGenerator,
    __asyncDelegator: __asyncDelegator,
    __asyncValues: __asyncValues,
    __makeTemplateObject: __makeTemplateObject,
    __importStar: __importStar,
    __importDefault: __importDefault
};
export function RunAsWebWorker(...dependencies) {
    return function (target, propertyKey, descriptor) {
        target[propertyKey] = raww(target[propertyKey], ...dependencies);
        return target;
    };
}
export function raww(fn, ...dependencies) {
    if (fn == null || typeof fn !== "function") {
        return fn;
    }
    const dependencyBlobs = [
        tslibDependencies,
        { tslib: tslibDependencies }
    ]
        .concat(...dependencies)
        .reduce((arr, map) => {
        for (const entry in map) {
            arr.push({ name: entry, dependency: map[entry] });
        }
        return arr;
    }, [])
        .map(getDependencyConstructor)
        .filter(v => v !== null)
        .map(str => str + "\r\n");
    const workerCode = () => {
        self.addEventListener("message", function (e) {
            $$$$(...e.data).then(result => {
                self.postMessage({ result });
            }, err => {
                self.postMessage({ error: err });
            });
        }, false);
    };
    function $$$$(...data) {
        return (fn).call({}, ...data);
    }
    const renderArray = dependencyBlobs.concat([
        `${$$$$.toString().replace("fn", functionToString(fn))};`,
        "(",
        workerCode.toString(),
        ")();"
    ]);
    const workerBlob = new Blob(renderArray, { type: "text/javascript" });
    let worker = new Worker(window.URL.createObjectURL(workerBlob), {
        name: fn.name
    });
    let replaceFunction = (...args) => {
        return new Promise((resolve, reject) => {
            const act = (e) => {
                worker.removeEventListener("message", act);
                worker.removeEventListener("messageerror", err);
                const result = e.data;
                result.result ? resolve(result.result) : reject(result.error);
            };
            const err = (e) => {
                worker.removeEventListener("message", act);
                worker.removeEventListener("messageerror", err);
                reject("an unserialisable response has been received");
            };
            worker.addEventListener("message", act, false);
            worker.addEventListener("messageerror", err, false);
            worker.postMessage(args);
        });
    };
    return replaceFunction;
}
//# sourceMappingURL=raww.js.map